# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - uses: actions/checkout@v3
    - run: touch ./src/main/resources/application-dev.properties
    - run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application-dev.properties

    - run: mkdir ./src/main/resources/firebase
    - run: touch ./src/main/resources/firebase/fcm-secret.json
    - run: echo "${{ secrets.FCM_PROPERTIES }}" | jq --raw-input --raw-output '.' > ./src/main/resources/firebase/fcm-secret.json

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        gradle-version: '8.7'
        arguments: clean bootJar

    - name: docker image build
      run: docker build -t pillintime/pillintime_spring .

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: docker Hub push
      run: docker push pillintime/pillintime_spring

  run-docker-image-on-ncp:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: docker pull
        run: sudo docker pull pillintime/pillintime_spring
      
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      - name: docker run new container
        run: sudo docker run --name pillintime_spring --rm -d -p 8080:8080 pillintime/pillintime_spring

      - name: delete old docker image
        run: sudo docker system prune -f
      
